# ~/.bashrc is executed when an interactive non-login shell starts
# https://bazaar.launchpad.net/~doko/+junk/pkg-bash-debian/view/head:/skel.bashrc

# TODO: upstream looks at $- to determine if the shell is interactive, but
# if we're in .bashrc shouldn't that be redundant?
[ -n "$PS1" ] || return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
# Note `checkwinsize` has been *enabled* by default since Bash 5.0.
# https://git.io/Je4B1
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# Enable colors
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Configure colors for `ls`
[ -x /usr/bin/dircolors ] && eval "$(dircolors --bourne-shell)"

# Activate Bash completion
# Why this path?
#   https://packages.debian.org/stable/all/bash-completion/filelist
[ -f /usr/share/bash-completion/bash_completion ] &&
  . /usr/share/bash-completion/bash_completion

# Set up git prompt
. "$(git --exec-path)/git-sh-prompt"
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM=auto

__mattdr_git_ps1() {
  local pre
  pre+='\[\e[1;32m\]'  # bold+green
  pre+='\u'  # username
  pre+='@'
  pre+='\h'  # host
  pre+='\[\e[m\]'  # reset
  pre+=':'
  pre+='\[\e[1;34m\]'  # bold+blue
  pre+='\w'  # current working directory
  pre+='\[\e[m\]'  # reset

  local format
  format+=' ['
  format+='%s'  # git status message
  format+=']'

  local post
  post+='\n'  # newline
  post+='\$'  # '#' or '$' depending on euid
  post+=' '

  __git_ps1 "${pre}" "${post}" "${format}"
}

# Check for bash-preexec's include guard to see if it's installed. We can't
# check for `precmd_functions` because that won't be set until bash-preexec
# initializes, which happens the first time $PROMPT_COMMAND is evaluated.
# https://git.io/JeRzW
if [[ -n "${__bp_imported+set}" ]]; then
  # bash-preexec is installed and controls $PROMPT_COMMAND. Add our command
  # to the array of pre-command functions.

  # Assign to a specific, unlikely-to-collide index so we don't add the command
  # again each time this file is sourced.
  precmd_functions[$((36#mattdrgit))]='__mattdr_git_ps1'
else
  # Easy case.
  export PROMPT_COMMAND='__mattdr_git_ps1'
fi

export EDITOR=nano
